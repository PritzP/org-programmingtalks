{"description":"http://www.Cppcon.org\n—\nPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015\n—\nTransducers allow to express transformations on sequential inputs (like std::transform, std::filter, most of boost::range::adators [4] and more) in a way that is independent of the input source. They are simple high order functions agnostic of the notion of iterator or collection and can be combined by simple function composition. They can later be applied eagerly or lazily over iterators, but most interestingly, also to other kinds of \"reactive\" sources, like networked streams, inter-process channels or reactive observables (e.g. RxCpp [3]). Not only they provide an elegant decoupling between the \"what\" and the \"how\" and higher level of reuse, their implementation is often simpler and and more performant than similar boost::range adaptors.\n\nTransducers were introduced in Clojure by Rich Hickey [2]. At Ableton we implemented them in C++ and released them as part of our Open Source modern C++ toolkit: Atria [1]. Our implementation introduces innovations of its own, like implementing state-full transducers without mutation, enabling further safety and reusability. We also use Eric Niebler's technique [5] to describe and check its concepts in standard compliant C++11.\n\nIn this session we will introduce the concept of transducers and how they can be implemented in modern C++. We will also cover some of the most interesting use-cases.\n\n[1] https://github.com/AbletonAG/atria\n[2] http://clojure.org/transducers\n[3] https://github.com/Reactive-Extensions/RxCpp\n[4] http://www.boost.org/doc/libs/1_58_0/libs/range/doc/html/range/reference/adaptors.html\n[5] http://ericniebler.com/2013/11/23/concept-checking-in-c11/\n— \nJuanpe is a Spanish software engineer currently based in Berlin, Germany. Since 2011 he works for Ableton, where he has helped building novel musical platforms like Push and Live and where he coordinates the \"Open Source Guild\" helping the adoption and contribution to FLOSS. He is most experienced in C++ and Python and likes tinkering with languages like Haskell or Clojure. He is an advocate for \"modern C++\" and pushes for adoption of declarative and functional paradigms in the programming mainstream. He is also an open source activist and maintainer of a couple of official GNU packages like Psychosynth which introduces new realtime audio processing techniques leveraging the newest C++ standards.\n—\nVideos Filmed & Edited by Bash Films: http://www.BashFilms.com","id":"d5804b50-afd0-4d40-90e9-3b759a3b921b","meta":{"duration":"PT1H4S"},"presenter":{"name":null},"slug":"cppcon-2015-juan-pedro-bolivar-puente-transducers-from-clojure-to-c","source":{"id":"vohGJjGxtJQ","provider":"youtube"},"tag":["Clojure (Programming Language)","CppCon 2015","Computer Science (Field)","Bash Films","Conference Video Recording","Event Video Recording","Video Conferencing","Video Services","Juan Pedro Bolívar Puente","C (Programming Language)","Programming Language (Software Genre)"],"title":"CppCon 2015: Juan Pedro Bolívar Puente “Transducers: from Clojure to C++\"","thumbnails":{"default":{"url":"https://i.ytimg.com/vi/vohGJjGxtJQ/default.jpg","width":120,"height":90},"medium":{"url":"https://i.ytimg.com/vi/vohGJjGxtJQ/mqdefault.jpg","width":320,"height":180},"high":{"url":"https://i.ytimg.com/vi/vohGJjGxtJQ/hqdefault.jpg","width":480,"height":360}}}